var sym = Symbol( "–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ" );
console.log(typeof sym);
console.log( sym.toString());

const EVT_LOGIN = Symbol( "event.login" );
console.log(EVT_LOGIN);

// —à–∞–±–ª–æ–Ω-–æ–¥–∏–Ω–æ—á–∫–∞
const INSTANCE = Symbol( "instance" );
function HappyFace() {
	if (HappyFace[INSTANCE]) return HappyFace[INSTANCE];
	function smile() {}
	return HappyFace[INSTANCE] = {
		smile: smile
	};
}

var me = HappyFace(),
you = HappyFace();
console.log(me);
console.log(me === you);

// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å–∏–º–≤–æ–ª–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –µ–≥–æ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ
const EVT_LOG = Symbol.for( "event.login" );
console.log(EVT_LOG);
const EVT_LOG2 = Symbol.for( "event.login2" );
console.log(EVT_LOG2);

function extractValues(str) {
	var key = Symbol.for( "extractValues.parse" ),
	re = extractValues[key] || /[^=ùÑû]+?=([^ùÑû]+?)(?=ùÑû|$)/g,
	values = [], match;
	while (match = re.exec( str )) {
		values.push( match[1] );
	}
	return values;
}

// –°–∏–º–≤–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–∏
var o = {
	foo: 42,
	[ Symbol( "bar" ) ]: "hello world",
	baz: true
};
console.log(Object.getOwnPropertyNames( o )); // [ "foo", "baz" ]

// –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —Å–∏–º–≤–æ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–∞
console.log(Object.getOwnPropertySymbols( o )); // [Symbol(bar)]
